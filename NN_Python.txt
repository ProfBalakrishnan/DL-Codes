import numpy as np

def sigmoid(x):
    return 1 / (1 + np.exp(-x))

def sigmoid_derivative(x):
    return x * (1 - x)

# Input data
X = np.array([[0, 0, 1], [0, 1, 1], [1, 0, 1], [1, 1, 1]])

# Output data
y = np.array([[0], [1], [1], [0]])

# Initialize weights randomly
np.random.seed(1)
weights_0 = 2 * np.random.random((3, 1)) - 1

# Training loop
for epoch in range(10000):
    # Forward propagation
    layer_0 = X
    layer_1 = sigmoid(np.dot(layer_0, weights_0))

    # Error calculation
    layer_1_error = y - layer_1

    # Backpropagation
    layer_1_delta = layer_1_error * sigmoid_derivative(layer_1)
    weights_0 += np.dot(layer_0.T, layer_1_delta)

# Testing the network
print("Output After Training:")
print(layer_1)